label_point = "Label", ";" ;  
goto_label = "GOTO", ident, ";" ;  
program_name = ident;  
value_type = "INTEGER", ident, { ",", ident } ;  
declaration_ident = ident;  
other_declaration = ",", ident;  
declaration = value_type, declaration_ident, { other_declaration } ;  
operation_not = "!", inseparable_expression ;  
and_action = "AND", inseparable_expression ;  
or_action = "OR", high_priority_expression ;  
equal_action = "==", middle_priority_expression ;  
not_equal_action = "!=", middle_priority_expression ;  
less_or_equal_action = "LT", middle_priority_expression ;  
greater_or_equal_action = "GT", middle_priority_expression ;  
add_action = "+", high_priority_expression ;  
sub_action = "-", high_priority_expression ;  
mul_action = "*", inseparable_expression ;  
div_action = "DIV", inseparable_expression ;  
mod_action = "MOD", inseparable_expression ;  
unary_operation = operation_not ;  
inseparable_expression = group_expression | unary_operation | ident_read | value_read;  
high_priority_left_expression = group_expression | unary_operation | ident_read | value_read ;  
high_priority_action = mul_action | div_action | mod_action | and_action ;  
high_priority_expression = high_priority_left_expression , { high_priority_action } ;  
middle_priority_left_expression = high_priority_expression | group_expression | unary_operation | ident_read | value_read ;  
middle_priority_action = add_action | sub_action | or_action ;  
middle_priority_expression = middle_priority_left_expression , { middle_priority_action } ;  
low_priority_left_expression = middle_priority_expression | high_priority_expression | group_expression | unary_operation | ident_read | value_read ;  
low_priority_action = less_or_equal_action | greater_or_equal_action | equal_action | not_equal_action ;  
low_priority_expression = low_priority_left_expression , { low_priority_action } ;  
group_expression = "(", low_priority_expression, ")" ;  
bind = ident_write , "==>", low_priority_expression ;  
if_expression = expression;  
body_for_true = {statement}, ";" ;  
body_for_false = "ELSE", {statement}, ";" ;  
cond_block = "IF", if_expression, body_for_true, [body_for_false] ;  
cycle_begin_expression = low_priority_expression;  
cycle_counter = ident;  
cycle_counter_last_value = value;  
cycle_body = "DO", statement, {statement} ;  
forto_cycle = "FOR", cycle_begin_expression, "==>", cycle_counter, "TO", cycle_counter_last_value, cycle_body ;  
while_cycle_head_expression = low_priority_expression ;  
while_cycle = "WHILE", while_cycle_head_expression, {statement}, ";" ;  
tokenCONTINUE = "CONTINUE" ;  
tokenWHILE = "WHILE" ;  
tokenEXIT = "EXIT" ;  
continue_while = tokenCONTINUE, tokenWHILE ;  
exit_while = tokenEXIT, tokenWHILE ;  
statement_in_while_body = statement | continue_while | exit_while ;  
repeat_until_cycle_cond = low_priority_expression ;  
repeat_until_cycle = "REPEAT", {statement}, "UNTIL", repeat_until_cycle_cond ;  
input = "GET", "(", ident_write, ")" ;  
output = "PUT", "(", low_priority_expression, ")" ;  
statement = recursive_descent_end_point | bind | cond_block | forto_cycle | while_cycle | repeat_until_cycle | label_point | goto_label | input | output;  
program = "MAINPROGRAM", program_name, "DATA...: START - END", { statement } ;  
digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9";  
non_zero_digit = "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9";  
unsigned_value = (non_zero_digit , { digit } | "0") ;  
value = [ sign ] , unsigned_value ;  
letter_in_upper_case = "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z";  
ident = letter_in_upper_case , letter_in_upper_case , letter_in_upper_case , letter_in_upper_case , letter_in_upper_case , letter_in_upper_case ;  
